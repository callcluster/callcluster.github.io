(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{DZVC:function(e,a,o){"use strict";o.r(a);var r=o("KHd+"),n=o("UQSp"),c=o("Kw5r");function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}c.a.config.optionMergeStrategies;var l={VueRemarkRoot:n.a},i=function(e){var a=e.options.components=e.options.components||{},o=e.options.computed=e.options.computed||{};Object.keys(l).forEach((function(e){"object"===t(l[e])&&"function"==typeof l[e].render||"function"==typeof l[e]&&"function"==typeof l[e].options.render?a[e]=l[e]:o[e]=function(){return l[e]}}))},s=c.a.config.optionMergeStrategies,p="__vueRemarkFrontMatter",d={excerpt:null,title:"Extracción del callgraph de programas C"};var u=function(e){e.options[p]&&(e.options[p]=d),c.a.util.defineReactive(e.options,p,d),e.options.computed=s.computed({$frontmatter:function(){return e.options[p]}},e.options.computed)},v=Object(r.a)({},(function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("VueRemarkRoot",[o("h1",{attrs:{id:"extracción-del-callgraph-de-programas-c"}},[o("a",{attrs:{href:"#extracci%C3%B3n-del-callgraph-de-programas-c","aria-hidden":"true"}},[o("span",{staticClass:"icon icon-link"})]),e._v("Extracción del callgraph de programas C")]),o("h2",{attrs:{id:"requisitos"}},[o("a",{attrs:{href:"#requisitos","aria-hidden":"true"}},[o("span",{staticClass:"icon icon-link"})]),e._v("Requisitos")]),o("p",[e._v("callcluster-clang requiere tener instalado el paquete "),o("code",{pre:!0},[e._v("libclang-10-dev")]),e._v(" para poder ejecutarse, busca la librería en "),o("code",{pre:!0},[e._v("/usr/lib/llvm-10/lib/libclang-10.so")]),e._v(" tal como detallado en el archivo "),o("code",{pre:!0},[e._v("CMakeLists.txt")]),e._v(". Para obtener esta librería debe instalarse clang 10 como descripto en "),o("a",{attrs:{href:"https://apt.llvm.org/",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("https://apt.llvm.org/")]),e._v(".")]),o("h2",{attrs:{id:"compilación"}},[o("a",{attrs:{href:"#compilaci%C3%B3n","aria-hidden":"true"}},[o("span",{staticClass:"icon icon-link"})]),e._v("Compilación")]),o("ol",[o("li",[e._v("Clonar el repositorio de código fuente de callcluster-clang")])]),o("pre",[o("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("git clone https://github.com/callcluster/callcluster-clang\n")])]),o("ol",{attrs:{start:"2"}},[o("li",[e._v("Compilar callcluster-clang")])]),o("pre",[o("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("cd callcluster-clang\nmkdir build\ncd build\ncmake ..\ncmake --build .\nchmod a+x callclusterClang\n")])]),o("h2",{attrs:{id:"extracción-del-callgraph"}},[o("a",{attrs:{href:"#extracci%C3%B3n-del-callgraph","aria-hidden":"true"}},[o("span",{staticClass:"icon icon-link"})]),e._v("Extracción del callgraph")]),o("p",[o("code",{pre:!0},[e._v("callclusterClang")]),e._v(" necesita, además de acceso al código fuente, una "),o("em",[e._v("compilation database")]),e._v(", que es una enumeración de las invocaciones al compilador de C y al linker. La "),o("em",[e._v("compilation databse")]),e._v(", por convención es un archivo denominado "),o("code",{pre:!0},[e._v("compile_commands.json")]),e._v(". Existe un parámetro de línea de comando de "),o("code",{pre:!0},[e._v("cmake")]),e._v(" que permite generar "),o("code",{pre:!0},[e._v("compile_commands.json")]),e._v(" al compilar el proyecto cuyo callgraph se desea extraer. Si el proyecto analizado no utiliza cmake, puede usarse "),o("a",{attrs:{href:"https://github.com/rizsotto/Bear",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("Bear")]),e._v(", que funciona con cualquier "),o("em",[e._v("toolchain")]),e._v(". El archivo "),o("code",{pre:!0},[e._v("compile_commands.json")]),e._v(" utiliza rutas relativas para identificar los archivos de código fuente, con lo cual no se debe cambiar su ubicación.")]),o("p",[e._v("En el caso de utilizar bear, debe tenerse en cuenta que Bear tiene que capturar todas las invocaciones al compilador, con lo cual suele ser necesario ejecutar "),o("code",{pre:!0},[e._v("make clean")]),e._v(" antes de ejecutar "),o("code",{pre:!0},[e._v("bear make")]),e._v(".")]),o("p",[e._v("Una vez obtenido "),o("code",{pre:!0},[e._v("compile_commands.json")]),e._v(", puede ejecutarse el binario "),o("code",{pre:!0},[e._v("callclusterClang")]),e._v(" de la siguiente manera: ")]),o("pre",[o("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("./callclusterClang <directorio donde se encuentra compile_commands.json> --progress\n")])]),o("p",[e._v("Una vez que se termina de ejecutar "),o("code",{pre:!0},[e._v("callclusterClang")]),e._v(", se escribe un archivo denominado "),o("code",{pre:!0},[e._v("analysis.json")]),e._v(" en la carpeta donde se ejecutó el comando (es decir, en el "),o("em",[e._v("current working directory")]),e._v(", "),o("strong",[e._v("no")]),e._v(" en el directorio de "),o("code",{pre:!0},[e._v("compile_commands.json")]),e._v(").")]),o("h2",{attrs:{id:"opciones-recibidas-por-callclusterclang"}},[o("a",{attrs:{href:"#opciones-recibidas-por-callclusterclang","aria-hidden":"true"}},[o("span",{staticClass:"icon icon-link"})]),e._v("Opciones recibidas por callclusterClang")]),o("pre",[o("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("./callclusterClang [CARPETA] [--progress]\n")])]),o("ul",[o("li",[e._v("La "),o("code",{pre:!0},[e._v("CARPETA")]),e._v(" es obligatoria, y debe tener un archivo llamado "),o("code",{pre:!0},[e._v("compile_commands.json")])]),o("li",[e._v("La opción "),o("code",{pre:!0},[e._v("--progress")]),e._v(" es opcional, e indica si se desea que el programa escriba a la consola información sobre el avance. Esta opción es importante para proyectos con muchos archivos de código fuente.")])]),o("h2",{attrs:{id:"ejemplo-php"}},[o("a",{attrs:{href:"#ejemplo-php","aria-hidden":"true"}},[o("span",{staticClass:"icon icon-link"})]),e._v("Ejemplo (php)")]),o("p",[e._v("Asumiendo ubuntu, según "),o("code",{pre:!0},[e._v("README.md")]),e._v(":")]),o("pre",[o("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("git clone https://github.com/php/php-src\ncd php-src\nsudo apt install -y pkg-config build-essential autoconf bison re2c libxml2-dev libsqlite3-dev\n./buildconf\n./configure\nbear make\n")])]),o("p",[e._v("En el directorio donde se encuentra "),o("code",{pre:!0},[e._v("callclusterClang")]),e._v(":")]),o("pre",[o("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("./callclusterClang <ubicación de la carpeta php-src> --progress\n")])]),o("h2",{attrs:{id:"ejemplo-redis"}},[o("a",{attrs:{href:"#ejemplo-redis","aria-hidden":"true"}},[o("span",{staticClass:"icon icon-link"})]),e._v("Ejemplo (redis)")]),o("pre",[o("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("git clone https://github.com/redis/redis\ncd redis\nbear make\n")])]),o("p",[e._v("En el directorio donde se encuentra "),o("code",{pre:!0},[e._v("callclusterClang")]),e._v(":")]),o("pre",[o("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("./callclusterClang <ubicación de la carpeta redis> --progress\n")])])])}),[],!1,null,null,null);"function"==typeof i&&i(v),"function"==typeof u&&u(v);a.default=v.exports},UQSp:function(e,a,o){"use strict";a.a={name:"VueRemarkRoot",render:function(e){return e("div",null,this.$slots.default)}}}}]);